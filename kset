#!/bin/bash

RETVAL=0

if [ ! -x "$(which kubectl 2>/dev/null)" ]; then
  echo "Kubectl not Installed. Please install kubectl (https://kubernetes.io/docs/tasks/kubectl/install/)" >&2
  exit 1
fi

setns() {
    kubectl  --context=$(kubectl config current-context) get ns | awk 'NR!=1 {print $1}'
    echo -n "Select Namespace [ENTER]: "
    read NS
    if [ ! -z "$NS" ]; then
        kubectl config set-context "$(kubectl config current-context)" "--namespace=$NS" >>/dev/null
    echo "Set context namespace to \"$NS\""
    fi
    }

setnode() {
    kubectl  --context=$(kubectl config current-context) get nodes | awk 'NR!=1 {print $1}'

   echo -n "Select Node [ENTER]: "

   read NODE

   IMAGE="alpine"
   POD="$NODE-exec-$(env LC_CTYPE=C tr -dc a-z0-9 < /dev/urandom | head -c 6)"

   # Check the node existance
   kubectl get node "$NODE" >/dev/null || exit 1

   #nsenter JSON overrrides
   OVERRIDES="$(cat <<EOT
{
  "spec": {
    "nodeName": "$NODE",
    "hostPID": true,
    "containers": [
      {
        "securityContext": {
          "privileged": true
        },
        "image": "$IMAGE",
        "name": "nsenter",
        "stdin": true,
        "stdinOnce": true,
        "tty": true,
        "command": [ "nsenter", "--target", "1", "--mount", "--uts", "--ipc", "--net", "--pid", "--", "bash", "-l" ]
      }
    ]
  }
}
EOT
)"

echo "creating pod \"$POD\" on node \"$NODE\""
kubectl run --rm --image $IMAGE --overrides="$OVERRIDES"  --restart=Never -ti "$POD"
}

case "$1" in
   "")
      echo "Usage: $0 [setns] [setnode]"
      RETVAL=1
      ;;
   setns)
      setns
      ;;
   setnode)
      setnode
esac

exit $RETVAL
